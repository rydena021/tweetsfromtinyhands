<script>
$(document).ready(function () {
    d3.json('data.json', function (data) {
        var genderPieChart = dc.pieChart('#genderPie');
        var marriagePieChart = dc.pieChart('#marriagePie');
        var ageDefaultersChart = dc.barChart('#ageDefaulters');
        var limitBalDefaultersChart = dc.lineChart('#limitBalDefaulters');
        var defaultCountTicker = dc.numberDisplay('.default-count');
        var ndx = crossfilter(data);
        var defaultDim = ndx.dimension(function (d) {
            return d['default payment next month'];
        });
        var genderDim = ndx.dimension(function (d) {
            var sex = d['SEX'];
            if (sex === 1) {
                return 'Male';
            } else if (sex === 2) {
                return 'Female';
            } else {
                return 'Unknown';
            }
        });
        var marriageDim = ndx.dimension(function (d) {
            var status = d['MARRIAGE'];
            if (status === 1) {
                return 'Married';
            } else if (status === 2) {
                return 'Single';
            } else if (status === 3) {
                return 'Others';
            } else {
                return 'Unknown';
            }
        });

        genderPieChart
            .width(180)
            .height(180)
            .radius(80)
            .dimension(genderDim)
            .group(genderDim.group());
        genderPieChart.controlsUseVisibility(true);
        $('#genderPie > a').on('click', function (e) {
            genderPieChart.filterAll();
            dc.redrawAll();
            e.preventDefault();
        });

        marriagePieChart
            .width(180)
            .height(180)
            .radius(80)
            .dimension(marriageDim)
            .group(marriageDim.group());
        marriagePieChart.controlsUseVisibility(true);
        $('#marriagePie > a').on('click', function (e) {
            marriagePieChart.filterAll();
            dc.redrawAll();
            e.preventDefault();
        });
        ageMinMax = d3.extent(data, function (d) {
            return d['AGE'];
        });
        ageDefaultersDim = ndx.dimension(function (d) {
            return d['AGE'];
        });

        ageDefaultersChart
            .width(900)
            .height(250)
            .dimension(ageDefaultersDim)
            .group(ageDefaultersDim.group().reduceSum(dc.pluck('default payment next month')))
            .x(d3.scale.linear().domain(ageMinMax))
            .elasticY(true)
            .elasticX(true)
            .xAxisLabel('Age')
            .yAxisLabel('People Who Defaulted')
            .controlsUseVisibility(true);

        $('#ageDefaulters > a').on('click', function (e) {
            ageDefaultersChart.filterAll();
            dc.redrawAll();
            e.preventDefault();
        });

        limitDefaultersDim = ndx.dimension(function (d) {
            return d['LIMIT_BAL'];
        });

        limitBalMinMax = d3.extent(data, function (d) {
            return d['LIMIT_BAL'];
        });

        limitBalDefaultersChart
            .width(900)
            .height(250)
            .dimension(limitDefaultersDim)
            .group(limitDefaultersDim.group().reduceSum(dc.pluck('default payment next month')))
            .x(d3.scale.linear().domain(limitBalMinMax))
            .renderArea(true)
            .mouseZoomable(true)
            .elasticY(true)
            .xAxisLabel('Amount of Credit Given')
            .yAxisLabel('People')
            .turnOnControls(true)
            .controlsUseVisibility(true);

        $('#limitBalDefaulters > a').on('click', function (e) {
            limitBalDefaultersChart.focus();
            limitBalDefaultersChart.filterAll();
            dc.redrawAll();
            e.preventDefault();
        });


        defaultCountTicker
            .group(defaultDim.group())
            .formatNumber(d3.format(''));


        dc.renderAll();

    });
});
</script>

<div class="container">

<!-- new! first pie chart -->
<div class="row">
  <div id="gain-loss-chart">
    <strong>Days by Gain/Loss</strong>
    <a class="reset" href="javascript:gainOrLossChart.filterAll();dc.redrawAll();" style="display: none;">reset</a>
    <div class="clearfix"></div>
  </div>
</div>

<div class="row">
  <!-- create navigation buttons with bootstrap styles -->
  <nav>
    <ul class="pager">
      <li class="pager-prev nasdaqTableFirstButton">
        <a href="#">
          << First
        </a>
      </li>
      <li class="nasdaqTablePreviousButton">
        <a href="#">
          < Previous
        </a>
      </li>
      <span>
          <span class="nasdaqTableStartNumber">0</span>-<span class="nasdaqTableEndNumber">0</span>
          of <span class="nasdaqTableTotalRowCount">0</span> records.
      </span>
      <li class="nasdaqTableNextButton">
        <a href="#">
          Next >
        </a>
      </li>
      <li class="pager-next nasdaqTableLastButton">
        <a href="#">
          Last >>
        </a>
      </li>
    </ul>
  </nav>
  <!-- create a table to host the dataTable -->
  <table class="dc-data-table table table-hover"></table>
</div> <!-- end row containing datatable -->

</div>

<script type='text/javascript'>
var facts; // this will be our CrossFilter variable

// this is the variable that holds the first pie chart (new!)
var gainOrLossChart = dc.pieChart('#gain-loss-chart');
var nasdaqTable = dc.dataTable('.dc-data-table');

// pagination controls for nasdaqTable
var nasdaqTableOffset = 0, nasdaqTableItemsPerPage = 10;

function nasdaqPaginationDisplay() {
  // This function does the following:
  // disable << First, Previous if already at 0
  // disable >> Next, Last if already at last page
  // display number of records shown

  var totalRowCount = facts.size();
  // update numbers shown
  d3.select(".nasdaqTableTotalRowCount").text(totalRowCount);
  d3.select(".nasdaqTableStartNumber").text(nasdaqTableOffset + 1);
  d3.select(".nasdaqTableEndNumber").text(
    Math.min(nasdaqTableOffset + nasdaqTableItemsPerPage, totalRowCount)
  );
  // disable first/previous buttons if we're at the start of the list
  d3.select(".nasdaqTableFirstButton").classed("disabled",
     nasdaqTableOffset <= 0
  );
  d3.select(".nasdaqTablePreviousButton").classed("disabled",
     nasdaqTableOffset <= 0
  );
  // similarly with next/last buttons if we're at end of list
  d3.select(".nasdaqTableNextButton").classed("disabled",
     nasdaqTableOffset >= facts.size() - (facts.size() % nasdaqTableItemsPerPage)
  );
  d3.select(".nasdaqTableLastButton").classed("disabled",
     nasdaqTableOffset >= facts.size() - (facts.size() % nasdaqTableItemsPerPage)
  );
  // attach click handlers to the buttons and set them to fire only when enabled
  d3.select(".nasdaqTableFirstButton").on("click", function() {
     if (!d3.select(this).classed("disabled")) {
       nasdaqTableFirst();
     }
  });
  d3.select(".nasdaqTablePreviousButton").on("click", function() {
     if (!d3.select(this).classed("disabled")) {
       nasdaqTablePrevious();
     }
  });
  d3.select(".nasdaqTableNextButton").on("click", function() {
     if (!d3.select(this).classed("disabled")) {
       nasdaqTableNext();
     }
  });
  d3.select(".nasdaqTableLastButton").on("click", function() {
     if (!d3.select(this).classed("disabled")) {
       nasdaqTableLast();
     }
  });
}
function nasdaqTableUpdate() {
  // Given the current offset, redraw the table and reset pagination controls
  // as necessary
  nasdaqTable.beginSlice(nasdaqTableOffset);
  nasdaqTable.endSlice(nasdaqTableOffset + nasdaqTableItemsPerPage);
  nasdaqTable.redraw();
  nasdaqPaginationDisplay();
}
function nasdaqTableFirst() {
  // if "<< First" button clicked
  nasdaqTableOffset = 0;
  nasdaqTableUpdate();
}
function nasdaqTablePrevious() {
  // if "< Previous" button clicked
  if (nasdaqTableOffset >= nasdaqTableItemsPerPage) {
    nasdaqTableOffset -= nasdaqTableItemsPerPage;
    nasdaqTableUpdate();
  }
}
function nasdaqTableNext() {
  // if "> Next" button clicked
  nasdaqTableOffset += nasdaqTableItemsPerPage;
  nasdaqTableUpdate();
}
function nasdaqTableLast() {
  // if ">> Last" button clicked
  nasdaqTableOffset = facts.size() - (facts.size() % nasdaqTableItemsPerPage);
  // TODO: we'll have to change facts.size() to the number of filtered items eventually
  //       take care of that later
  nasdaqTableUpdate();
}
// end nasdaqTable navigation controls

// load the data in from the CSV with d3
d3.csv('facts.csv', function (data) {
    // coerce the data into the correct format (see Step 2)
    var dateFormat = d3.time.format('%m/%d/%Y');
    var numberFormat = d3.format('.2f');

    data.forEach(function (d) {
        d.dd = dateFormat.parse(d.date);
        d.close = +d.close; // coerce to number
        d.open  = +d.open;
        d.change = +d.change;
        d.volume = +d.volume
    });

    // load the data into CrossFilter
    facts = crossfilter(data);
    var all = facts.groupAll();

    // Create a data dimension
    var dateDimension = facts.dimension(function (d) {
        return d.dd;
    });
    // Create a categorical data dimension for gain/loss
    var gainOrLoss = facts.dimension(function (d) {
        return d.open > d.close ? 'Loss' : 'Gain';
    });
    var gainOrLossGroup = gainOrLoss.group();

    // create the gainOrLoss pie chart
    gainOrLossChart
      .width(180)
      .height(180)
      .radius(80)
      .dimension(gainOrLoss)
      .group(gainOrLossGroup) // all below are optional
      .label(function (d) {
        if (gainOrLossChart.hasFilter() && !gainOrLossChart.hasFilter(d.key)) {
            return d.key + '(0%)';
        }
        var label = d.key;
        if (all.value()) { // add in the percentage
            label += '(' + Math.floor(d.value / all.value() * 100) + '%)';
        }
        return label;
      })
      .transitionDuration(500) // changes transition duration (default: 350 ms)

    // create the dataTable
    nasdaqTable
        .dimension(dateDimension) // obligatory
        .group(function (d) {
            // obligatory
            return 'All';
        })
        .size(Infinity) // optional, default 25
        .columns([ // obligatory
            'date',
            'open',
            'close',
            {
                label: 'Change', // use this as the column label
                format: function (d) {
                    return numberFormat(d.close - d.open);
                }
            },
            'volume'
        ])
        .sortBy(function (d) {
            // optional
            return d.dd;
        })
        .order(
            // optional
            d3.ascending
        )

    nasdaqTableUpdate(); // make sure pagination kicks in for the datatable
                         // before the charts are loaded so we only display
                         // the first $nasdaqTableItemsPerPage rows
    // render all charts (in this case just the datatable)
    dc.renderAll();

});
</script>
