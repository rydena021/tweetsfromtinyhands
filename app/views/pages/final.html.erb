<div class='container'>
  <div class='row'>
    <div class='col s12'>
      <table class='table highlight' id='dc-table-graph'>
        <thead>
          <tr class='header'>
            <th>Date</th>
            <th>Tweet</th>
            <th>Device</th>
          </tr>
        </thead>
      </table>
    </div>
  </div>
</div>



<script>

// Load tweets from JSON
d3.json("<%= asset_path 'tweets.json' %>", function(error, tweets) {

  // TODO: rewrite functions below for cleaner, accurate data assignment.

  // Shitty string cleaner to remove URLs.
  function cleanTweet(tweet) {
      switch(true) {
          case /https:\/\/t.co+\S+/i.test(tweet):
            return tweet.replace(/https:\/\/t.co+\S+/gi,'');
            break;
          default:
            return tweet;
            break;
      }
  };

  // Returns array of lexical data.
  function tweetMetrics(tweet) {

      var metrics = { "words": 0, "chars": 0, "caps": 0, "exclams": 0 };

      if (tweet.trim().split(/\s+\b/)) {
        metrics.words = tweet.trim().split(/\s+\b/).length;
      }
      if (tweet.match(/\w/g)) {
        metrics.chars = tweet.match(/\w/g).length;
      }
      if (tweet.match(/[A-Z]/g)) {
        metrics.caps = tweet.match(/[A-Z]/g).length;
      }
      if (tweet.match(/!/g)) {
        metrics.exclams = tweet.match(/!/g).length;
      }
      return metrics;
  };

  // Regexs for device assignment.
  function getDevice(tweet) {
      switch (true) {
          case /Twitter for Android/i.test(tweet):
            return "Android";
            break;
          case /Twitter for iPhone/i.test(tweet):
            return "iPhone";
            break;
          case /Twitter for iPad/i.test(tweet):
            return "iPad";
            break;
          case /Instagram/i.test(tweet):
            return "Instagram";
            break;
          case /Periscope/i.test(tweet):
            return "Periscope";
            break;
          case /Twitter Web Client/i.test(tweet):
            return "Web Client";
            break;
          case /Media Studio/i.test(tweet):
            return "Media Studio";
            break;
          case /Twitter Ads/i.test(tweet):
            return "Ad";
            break;
          default:
            return "Unknown";
            break;
      }
  };

  // Various formatters.
  var formatNumber = d3.format(",d"),
      formatChange = d3.format("+,d"),
      formatDate = d3.time.format("%B %d, %Y"),
      formatTime = d3.time.format("%I:%M %p"),
      fullDateFormat = d3.time.format("%a %b %d %X %Z %Y");

  tweets.forEach(function(d, i) {
    d.index = +i;
    d.id = +d.id;
    d.retweet_count = +d.retweet_count;
    d.favorite_count = +d.favorite_count;
    d.text = cleanTweet(d.text);
    d.metrics = tweetMetrics(d.text);
    d.device = getDevice(d.source);
    d.date = fullDateFormat.parse(d.created_at);
  });

  // Create the dc.js chart objects & link to div
  var dataTable = dc.dataTable("#dc-table-graph");

    // Run the data through crossfilter and load our 'facts'
  var facts = crossfilter(tweets);

  // Create dataTable dimension
  var timeDimension = facts.dimension(function (d) {
    return d.date;
  });

  // Setup the charts

  // Table of earthquake data
  dataTable.width(960).height(800)
    .dimension(timeDimension)
    .group(function(d) { return "Tweet Table"
     })
    .size(50)
    .columns([
      function(d) { return d.date; },
      function(d) { return d.text; },
      function(d) { return d.device; }
    ])
    .sortBy(function(d){ return d.date; })
    .order(d3.descending);

  // Render the Charts
  dc.renderAll();

});

  </script>
