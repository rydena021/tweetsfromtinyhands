<style>

@import url(http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:400,700);


h1 {
  font-size: 106px;
  font-weight: bold;
  margin-top: .3em;
  margin-bottom: 0;
}

h1 + h2 {
  margin-top: 0;
}

h2 {
  font-weight: 400;
  font-size: 28px;
}

h1, h2 {
  font-family: "Yanone Kaffeesatz";
  text-rendering: optimizeLegibility;
}

#body > p {
  line-height: 1.5em;
  width: 640px;
  text-rendering: optimizeLegibility;
}

#charts {
  padding: 10px 0;
}

.chart {
  display: inline-block;
  height: 151px;
  margin-bottom: 20px;
}

.tweet-text {
  /*width: 1000px;*/
}

.reset {
  padding-left: 1em;
  font-size: smaller;
  color: #ccc;
}

.background.bar {
  fill: #ccc;
}

.foreground.bar {
  fill: steelblue;
}

.axis path, .axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.axis text {
  font: 10px sans-serif;
}

.brush rect.extent {
  fill: steelblue;
  fill-opacity: .125;
}

.brush .resize path {
  fill: #eee;
  stroke: #666;
}

#hour-chart {
  width: 260px;
}

#distance-chart {
  width: 420px;
}

#date-chart {
  width: 920px;
}


#tweet-list .time {
  color: #999;
}



#tweet-list .early {
  color: green;
}

/*aside {
  position: absolute;
  left: 740px;
  font-size: smaller;
  width: 220px;
}*/

</style>


<div class="container-fluid">

  <div class="center-align">
    <h1><a href="https://www.lewagon.com/copenhagen"><%= image_tag("logo.jpg", size: "150", align: "center") %></a>Tweets from Tiny Hands<a href="https://www.lewagon.com/copenhagen"><%= image_tag("logo2.jpg", size: "150", align: "center") %></a></h1>
  </div>

  <hr>

  <aside class= "right-align" id="totals"><span id="active">-</span> of <span id="total">-</span> tweets selected.
<div class="title"><a href="javascript:reset(1)" class="reset">reset</a></div></aside>

  <div id="charts">
    <div class="row center-align">
      <div class="col s12">
        <div class="chart" id="hour-chart">
          <div class="title">Time of Day</div>
        </div>
      </div>
    </div>
    <div class="row center-align">
      <div class="col s12">
        <div class="chart" id="date-chart" >
          <div class="title">Date</div>
        </div>
      </div>
    </div>
  </div>

<hr>
  <!-- DATA TABLE -->


</div>


<div class="container">
  <div class="row">
    <div class="col s12">
      <table class="table bordered highlight responsive-table lists">
        <thead>
          <tr class="header">
            <th>Time</th>
            <th>Retweets</th>
          </tr>
        </thead>
        <tbody class="list" id="tweet-list"></tbody>
      </table>
    </div>
  </div>
</div>
<script>

// Load tweet data
d3.json("<%= asset_path 'tweets.json' %>", function(error, tweets) {

  // TODO: rewrite functions below for cleaner, accurate data assignment.

  // Shitty string cleaner to remove URLs.
  function cleanTweet(tweet) {
      switch(true) {
          case /https:\/\/t.co+\S+/i.test(tweet):
            return tweet.replace(/https:\/\/t.co+\S+/gi,'');
            break;
          default:
            return tweet;
            break;
      }
  };

  // Returns array of lexical data.
  function tweetMetrics(tweet) {

      var metrics = { "words": 0, "chars": 0, "caps": 0, "exclams": 0 };

      if (tweet.trim().split(/\s+\b/)) {
        metrics.words = tweet.trim().split(/\s+\b/).length;
      }
      if (tweet.match(/\w/g)) {
        metrics.chars = tweet.match(/\w/g).length;
      }
      if (tweet.match(/[A-Z]/g)) {
        metrics.caps = tweet.match(/[A-Z]/g).length;
      }
      if (tweet.match(/!/g)) {
        metrics.exclams = tweet.match(/!/g).length;
      }
      return metrics;
  }

  // Regexs for device assignment.
  function getDevice(tweet) {
      switch (true) {
          case /Twitter for Android/i.test(tweet):
            return "Android";
            break;
          case /Twitter for iPhone/i.test(tweet):
            return "iPhone";
            break;
          case /Twitter for iPad/i.test(tweet):
            return "iPad";
            break;
          case /Instagram/i.test(tweet):
            return "Instagram";
            break;
          case /Periscope/i.test(tweet):
            return "Periscope";
            break;
          case /Twitter Web Client/i.test(tweet):
            return "Web Client";
            break;
          case /Media Studio/i.test(tweet):
            return "Media Studio";
            break;
          case /Twitter Ads/i.test(tweet):
            return "Ad";
            break;
          default:
            return "Unknown";
            break;
      }
  };

  // Various formatters.
  var formatNumber = d3.format(",d"),
      formatChange = d3.format("+,d"),
      formatDate = d3.time.format("%B %d, %Y"),
      formatTime = d3.time.format("%I:%M %p"),
      fullDateFormat = d3.time.format("%a %b %d %X %Z %Y");

  // A nest operator, for grouping the tweet list.
  var nestByDate = d3.nest()
      .key(function(d) { return d3.time.day(d.date); });

  // A little coercion, since the CSV is untyped.
  tweets.forEach(function(d, i) {
    d.index = +i;
    d.id = +d.id;
    d.retweet_count = +d.retweet_count;
    d.favorite_count = +d.favorite_count;
    d.text = cleanTweet(d.text);
    d.metrics = tweetMetrics(d.text);
    d.device = getDevice(d.source);
    d.date = fullDateFormat.parse(d.created_at);
  });
  // Create the crossfilter for the relevant dimensions and groups.
  var tweet = crossfilter(tweets),
      all = tweet.groupAll(),
      date = tweet.dimension(function(d) { return d.date; }),
      dates = date.group(d3.time.day),
      hour = tweet.dimension(function(d) { return d.date.getHours() + d.date.getMinutes() / 60; }),
      hours = hour.group(Math.floor);

  var charts = [

    barChart()
        .dimension(hour)
        .group(hours)
      .x(d3.scale.linear()
        .domain([0, 24])
        .rangeRound([0, 10 * 24])),

    barChart()
        .dimension(date)
        .group(dates)
        .round(d3.time.day.round)
      .x(d3.time.scale()
        .domain([new Date(2015, 5, 1), new Date(2017, 5, 1)])
        .rangeRound([0, 10 * 90]))
        .filter([new Date(2017, 0, 1), new Date(2017, 3, 1)])

  ];

  // Given our array of charts, which we assume are in the same order as the
  // .chart elements in the DOM, bind the charts to the DOM and render them.
  // We also listen to the chart's brush events to update the display.
  var chart = d3.selectAll(".chart")
      .data(charts)
      .each(function(chart) { chart.on("brush", renderAll).on("brushend", renderAll); });

  // Render the initial lists.
  var list = d3.selectAll(".list")
      .data([tweetList]);

  // Render the total.
  d3.selectAll("#total")
      .text(formatNumber(tweet.size()));

  renderAll();

  // Renders the specified chart or list.
  function render(method) {
    d3.select(this).call(method);
  }

  // Whenever the brush moves, re-rendering everything.
  function renderAll() {
    chart.each(render);
    list.each(render);
    d3.select("#active").text(formatNumber(all.value()));
  }

  window.filter = function(filters) {
    filters.forEach(function(d, i) { charts[i].filter(d); });
    renderAll();
  };

  window.reset = function(i) {
    charts[i].filter(null);
    renderAll();
  };

  function tweetList(div) {
    var tweetsByDate = nestByDate.entries(date.top(40));

    div.each(function() {
      var date = d3.select(this).selectAll(".date")
          .data(tweetsByDate, function(d) { return d.key; });

      date.enter().append("div")
          .attr("class", "date")
        .append("tr")
          .attr("class", "day")
          .html(function(d) { return '<td colspan="3">' + formatDate(d.values[0].date) + '</td>'; });

      date.exit().remove();

      var tweet = date.order().selectAll(".tweet")
          .data(function(d) { return d.values; }, function(d) { return d.index; });

      var tweetEnter = tweet.enter().append("tr")
          .attr("class", "tweet");

      tweetEnter.append("td")
          .attr("class", "time")
          .text(function(d) { return formatTime(d.date); });

      tweetEnter.append("td")
          .attr("class", "tweet-text")
          .html(function(d) { return '<a href="https://twitter.com/realDonaldTrump/status/' + d.id_str + '">' + d.text + '</a>'; });

      tweetEnter.append("td")
          .attr("class", "retweets")
          .text(function(d) { return d.retweet_count; });

      tweet.exit().remove();

      tweet.order();
    });
  }

  function barChart() {
    if (!barChart.id) barChart.id = 0;

    var margin = {top: 10, right: 10, bottom: 20, left: 10},
        x,
        y = d3.scale.linear().range([100, 0]),
        id = barChart.id++,
        axis = d3.svg.axis().orient("bottom"),
        brush = d3.svg.brush(),
        brushDirty,
        dimension,
        group,
        round;

    function chart(div) {
      var width = x.range()[1],
          height = y.range()[0];

      y.domain([0, group.top(1)[0].value]);

      div.each(function() {
        var div = d3.select(this),
            g = div.select("g");

        // Create the skeletal chart.
        if (g.empty()) {
          div.select(".title").append("a")
              .attr("href", "javascript:reset(" + id + ")")
              .attr("class", "reset")
              .text("reset")
              .style("display", "none");

          g = div.append("svg")
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.top + margin.bottom)
            .append("g")
              .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          g.append("clipPath")
              .attr("id", "clip-" + id)
            .append("rect")
              .attr("width", width)
              .attr("height", height);

          g.selectAll(".bar")
              .data(["background", "foreground"])
            .enter().append("path")
              .attr("class", function(d) { return d + " bar"; })
              .datum(group.all());

          g.selectAll(".foreground.bar")
              .attr("clip-path", "url(#clip-" + id + ")");

          g.append("g")
              .attr("class", "axis")
              .attr("transform", "translate(0," + height + ")")
              .call(axis);

          // Initialize the brush component with pretty resize handles.
          var gBrush = g.append("g").attr("class", "brush").call(brush);
          gBrush.selectAll("rect").attr("height", height);
          gBrush.selectAll(".resize").append("path").attr("d", resizePath);
        }

        // Only redraw the brush if set externally.
        if (brushDirty) {
          brushDirty = false;
          g.selectAll(".brush").call(brush);
          div.select(".title a").style("display", brush.empty() ? "none" : null);
          if (brush.empty()) {
            g.selectAll("#clip-" + id + " rect")
                .attr("x", 0)
                .attr("width", width);
          } else {
            var extent = brush.extent();
            g.selectAll("#clip-" + id + " rect")
                .attr("x", x(extent[0]))
                .attr("width", x(extent[1]) - x(extent[0]));
          }
        }

        g.selectAll(".bar").attr("d", barPath);
      });

      function barPath(groups) {
        var path = [],
            i = -1,
            n = groups.length,
            d;
        while (++i < n) {
          d = groups[i];
          path.push("M", x(d.key), ",", height, "V", y(d.value), "h9V", height);
        }
        return path.join("");
      }

      function resizePath(d) {
        var e = +(d == "e"),
            x = e ? 1 : -1,
            y = height / 3;
        return "M" + (.5 * x) + "," + y
            + "A6,6 0 0 " + e + " " + (6.5 * x) + "," + (y + 6)
            + "V" + (2 * y - 6)
            + "A6,6 0 0 " + e + " " + (.5 * x) + "," + (2 * y)
            + "Z"
            + "M" + (2.5 * x) + "," + (y + 8)
            + "V" + (2 * y - 8)
            + "M" + (4.5 * x) + "," + (y + 8)
            + "V" + (2 * y - 8);
      }
    }

    brush.on("brushstart.chart", function() {
      var div = d3.select(this.parentNode.parentNode.parentNode);
      div.select(".title a").style("display", null);
    });

    brush.on("brush.chart", function() {
      var g = d3.select(this.parentNode),
          extent = brush.extent();
      if (round) g.select(".brush")
          .call(brush.extent(extent = extent.map(round)))
        .selectAll(".resize")
          .style("display", null);
      g.select("#clip-" + id + " rect")
          .attr("x", x(extent[0]))
          .attr("width", x(extent[1]) - x(extent[0]));
      dimension.filterRange(extent);
    });

    brush.on("brushend.chart", function() {
      if (brush.empty()) {
        var div = d3.select(this.parentNode.parentNode.parentNode);
        div.select(".title a").style("display", "none");
        div.select("#clip-" + id + " rect").attr("x", null).attr("width", "100%");
        dimension.filterAll();
      }
    });

    chart.margin = function(_) {
      if (!arguments.length) return margin;
      margin = _;
      return chart;
    };

    chart.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      axis.scale(x);
      brush.x(x);
      return chart;
    };

    chart.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return chart;
    };

    chart.dimension = function(_) {
      if (!arguments.length) return dimension;
      dimension = _;
      return chart;
    };

    chart.filter = function(_) {
      if (_) {
        brush.extent(_);
        dimension.filterRange(_);
      } else {
        brush.clear();
        dimension.filterAll();
      }
      brushDirty = true;
      return chart;
    };

    chart.group = function(_) {
      if (!arguments.length) return group;
      group = _;
      return chart;
    };

    chart.round = function(_) {
      if (!arguments.length) return round;
      round = _;
      return chart;
    };

    return d3.rebind(chart, brush, "on");
  }
});

</script>
