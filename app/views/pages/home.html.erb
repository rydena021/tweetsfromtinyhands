<div class="container-fluid">
  <!-- TITLE/LOGO -->

<div class="center-align">
  <h1>Tweets from Tiny Hands</h1>
<!--   <a href="javascript:deviceChart.filterAll().filter('iPhone');dc.redrawAll();">iPhone</a> vs.
  <a href="javascript:deviceChart.filterAll().filter('Android');dc.redrawAll();">Android</a>
  <br><br>
  <a href="javascript:hourChart.filterAll().filter([0,4]);dc.redrawAll();">After Hours</a>
  <br><br>
  <a href="javascript:dateChart.filterAll().filter([new Date(2015, 5, 1), new Date(2016, 10, 7)]);dc.redrawAll();">Before</a> |
  <a href="javascript:dateChart.filterAll().filter([new Date(2016, 10, 8), new Date(2017, 3, 1)]);dc.redrawAll();">After</a> election -->
</div>

<div class="charts">
    <!-- DAY / DEVICE -->
  <div class='row'>
    <div class='col s12 m4' id='dc-day-chart'>
      <a class="reset" href="javascript:dayChart.filterAll();dc.redrawAll();" style="display: none;">reset</a>
    </div>
    <div class="col s12 m3 offset-m1" id='dc-device-chart'>
      <a class="reset" href="javascript:deviceChart.filterAll();dc.redrawAll();" style="display: none;">reset</a>
    </div>
    <div class='col s12 m4' id='dc-hour-chart'>
      <a class="reset" href="javascript:hourChart.filterAll();dc.redrawAll();" style="display: none;">reset</a>
    </div>
  </div>
  <br>
  <!-- TIMELINE -->
  <div class='row center-align'>
    <div class='col s12 m8 offset-m1' id='dc-date-chart'>
      <a class="reset" href="javascript:dateChart.filterAll();dc.redrawAll();" style="display: none;">reset</a>
    </div>
  </div>
</div>

  <!-- DATATABLE -->
  <div class='row'>
    <div class='col s12'>
      <table class='table bordered highlight' id='dc-data-table'>
        <thead>
          <tr class='header'>
            <th>Date</th> <th></th> <th>Tweet</th> <th>Device</th>
          </tr>
        </thead>
      </table>
    </div>
  </div>

</div>
<script>
// Create the dc.js chart objects & link to div
var dayChart = dc.rowChart("#dc-day-chart");
var deviceChart = dc.pieChart("#dc-device-chart");
var hourChart = dc.barChart("#dc-hour-chart");
var dateChart = dc.lineChart("#dc-date-chart");
var dataTable = dc.dataTable("#dc-data-table");

// Load tweet data from JSON file.
d3.json('<%= asset_path 'tweets.json' %>', function (tweets) {

  // Shitty string cleaner to remove URLs.
  function cleanTweet(text) {
      switch(true) {
          case /https:\/\/t.co+\S+/i.test(text):
            return text.replace(/https:\/\/t.co+\S+/gi,'');
            break;
          default:
            return text;
            break;
      }
  };
    // Regexs for device assignment.
  function setDevice(source) {
      switch (true) {
          case /Twitter for Android/i.test(source):
            return "Android";
            break;
          case /Twitter for iPhone/i.test(source):
            return "iPhone";
            break;
          case /Twitter Web Client/i.test(source):
            return "Web Client";
            break;
          case /Twitter for iPad/i.test(source):
            return "iPad";
            break;
          case /Instagram/i.test(source):
            return "Instagram";
            break;
          case /Periscope/i.test(source):
            return "Periscope";
            break;
          case /Media Studio/i.test(source):
            return "Media Studio";
            break;
          case /Twitter Ads/i.test(source):
            return "Ad";
            break;
          default:
            return "Unknown";
            break;
      }
  };

  // Regexs for device assignment.
  function getDevice(tweet) {
      switch (true) {
          case /Twitter for Android/i.test(tweet):
            return "Android";
            break;
          case /Twitter for iPhone/i.test(tweet):
            return "iPhone";
            break;
          case /Twitter Web Client/i.test(tweet):
            return "Web Client";
            break;
          default:
            return "Other";
            break;
      }
  };

  // Various formatters.
  var fullDateFormat = d3.time.format("%a %b %d %X %Z %Y"),
      formatDate = d3.time.format("%a %b %e"),
      formatTime = d3.time.format("%I:%M %p");

  // A little coercion, since the CSV is untyped.
  tweets.forEach(function(d, i) {
    d.index = +i;
    d.id = +d.id;
    d.date = fullDateFormat.parse(d.created_at);
    d.text = cleanTweet(d.text);
    d.device = setDevice(d.source);
  });

  // Run the data through crossfilter and load our 'facts'
  var facts = crossfilter(tweets);

  // Create day of week dimension/group.
  var dayOfWeek = facts.dimension(function (d) {
    var day = d.date.getDay();
    switch (day) {
      case 0:
        return "0.Sun";
      case 1:
        return "1.Mon";
      case 2:
        return "2.Tue";
      case 3:
        return "3.Wed";
      case 4:
        return "4.Thu";
      case 5:
        return "5.Fri";
      case 6:
        return "6.Sat";
    }
  });
  var dayOfWeekGroup = dayOfWeek.group();

  // Create hour dimension/group.
  var hourDim = facts.dimension(function(d) { return d.date.getHours() + d.date.getMinutes() / 60; });
  var hourGroup = hourDim.group(Math.floor);

  // Create dataTable dimension
  var dateDim = facts.dimension(function (d) { return d.date; });
  var dateGroup = dateDim.group(d3.time.day);

  // Create device dimension/group.
  var deviceDim = facts.dimension(function (d) { return getDevice(d.source); });
  var deviceGroup = deviceDim.group();

  // Weekday row chart
  dayChart.width(470)
    .height(250)
    .margins({top: 15, left: 40, right: 10, bottom: 20})
    .dimension(dayOfWeek)
    .group(dayOfWeekGroup)
    .transitionDuration(500)
    .colors(d3.scale.category10())
    .label(function (d){ return d.key.split(".")[1]; })
    .title(function(d){return d.value;})
    .elasticX(true)
    .xAxis();

  // Device pie chart
  deviceChart.width(250)
    .height(250)
    .radius(110)
    .innerRadius(20)
    .dimension(deviceDim)
    .group(deviceGroup)
    .transitionDuration(500)
    .colors(d3.scale.category10())
    .title(function(d){return d.value;});

  // Hour bar graph
  hourChart.width(450)
    .height(250)
    .margins({top: 15, left: 20, right: 10, bottom: 20})
    .dimension(hourDim)
    .group(hourGroup)
    .x(d3.scale.linear().domain([0, 24]))
    .elasticY(true)
    .xAxis();

  // Time line graph
  dateChart.width(1100)
    .height(250)
    .margins({top: 10, right: 10, bottom: 20, left: 40})
    .dimension(dateDim)
    .group(dateGroup)
    .transitionDuration(500)
    .elasticY(true)
    // .x(d3.time.scale().domain([new Date(2016, 2, 28), new Date(2017, 3, 1)]))
    .x(d3.time.scale().domain(d3.extent(tweets, function(d) { return d.date; })))
    .xAxis();

  // Data table
  dataTable.width(960)
    .dimension(dateDim)
    .group(function(d) { return "Tweet Table" })
    .transitionDuration(500)
    .size(100)
    .columns([
      function(d) { return formatDate(d.date); },
      function(d) { return formatTime(d.date); },
      function(d) { return '<a href="https://twitter.com/realDonaldTrump/status/' + d.id_str + '">' + d.text + '</a>'; },
      function(d) { return d.device; }
    ])
    .sortBy(function(d){ return d.date; }) .order(d3.descending)
    .on('renderlet', function (table) {
      // each time table is rendered remove nasty extra row dc.js insists on adding
      table.select('tr.dc-table-group').remove();
    });
    // Render the Charts
  dc.renderAll();

});

  </script>
